INFO:httpx:HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
INFO:faiss.loader:Loading faiss with AVX512 support.
INFO:faiss.loader:Successfully loaded faiss with AVX512 support.
INFO:faiss:Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"

Generated Code:
================================================================================
from netunicorn.client.remote import RemoteClient
from netunicorn.base.pipeline import Pipeline
from netunicorn.library.tasks.ping import PingTask
from netunicorn.base.nodes import NodePool

# NetUnicorn credentials
endpoint = 'https://pinot.cs.ucsb.edu/netunicorn'
login = '293nmay25'
password = '4Ij9Du65jrqj'

# Create RemoteClient instance
client = RemoteClient(endpoint=endpoint, login=login, password=password)

# Define the pipeline with PingTask
pipeline = Pipeline().then(PingTask())

# Get available nodes and select the first one
nodes = client.get_nodes()
working_nodes = nodes.take(1)

# Define experiment name
experiment_name = "nl4netunicorn_experiment"

# Delete any pre-existing experiment with the same name
try:
    client.delete_experiment(experiment_name)
except Exception as e:
    print(f"Error deleting experiment {experiment_name}: {e} (possibly non-existent, safe to ignore)")

# Prepare, start, and wait for the experiment
client.prepare_experiment(pipeline, working_nodes, experiment_name)
print(f"Experiment {experiment_name} prepared. Waiting for readiness...")
client.start_execution(experiment_name)
print(f"Experiment {experiment_name} started. Waiting for completion...")
client.wait_for_experiment(experiment_name)
print(f"Experiment {experiment_name} finished.")
results = client.get_experiment_status(experiment_name).execution_result
print(f"Experiment results: {results}")
================================================================================
